---
name: "build"
on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "!dependabot/*"
      - "*"
jobs:
  lint:
    name: "Lint"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/setup-go@v2"
        with:
          go-version: "^1.16"
      - name: "Install linting tools"
        # This is done before checking out, as to not modify go.mod
        run: "go install mvdan.cc/gofumpt/gofumports@v0.1.1"
      - uses: "actions/checkout@v2"
      - uses: "bewuethr/yamllint-action@v1.1.1"
        with:
          config-file: ".yamllint"
      - name: "Go Mod Tidy"
        run: "go mod tidy && bash -c '[ $(git status --porcelain | tee /dev/fd/2 | wc -c) -eq 0 ]'"
      - name: "Formatting (gofumpt)"
        run: |
          GOFUMPT_OUTPUT="$(find . -iname '*.go' -type f | grep -v pb.go | grep -v 'pb.*.go' | xargs gofumports -d)"
          if [ -n "$GOFUMPT_OUTPUT" ]; then
            echo "All the following files are not correctly formatted"
            echo "${GOFUMPT_OUTPUT}"
            exit 1
          fi
      - uses: "golangci/golangci-lint-action@v2"
        with:
          version: "v1.43"
          skip-go-installation: true
          skip-pkg-cache: true
          skip-build-cache: false

  test:
    name: "Test"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-go@v2"
        with:
          go-version: "^1.16"
      - uses: "authzed/action-testserver@v3"
      - name: "go test"
        run: "go test -tags integration ./..."

  protobuf:
    name: "Generate Protobufs"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/setup-go@v2"
        with:
          go-version: "^1.16"
      - name: "Install local Go Protobuf plugins"
        run: "go install github.com/envoyproxy/protoc-gen-validate@v0.6.1"
      - uses: "actions/checkout@v2"
      - uses: "bufbuild/buf-setup-action@v0.6.0"
        with:
          version: "1.0.0-rc8"
      - name: "Generate & Diff Protos"
        run: "./buf.gen.yaml && git diff && bash -c '[ $(git status --porcelain | tee /dev/fd/2 | wc -c) -eq 0 ]'"
